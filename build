#!/bin/bash

# http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/ # credits for almost everything
# http://www.mpfr.org/
# https://gmplib.org/
# http://www.multiprecision.org/
# http://www.cloog.org/ # not needed for gcc 5 and up
# http://isl.gforge.inria.fr/
# https://www.gnu.org/software/binutils/
# https://www.gnu.org/software/libc/
# https://www.kernel.org/
# https://git.linaro.org/toolchain/gcc.git # linaro and gnu

# This script should be able to build most versions (i only tried 4.9 5 and 6/tends to go bad somtimes)
# How to use.... (UBUNTU 16.04/10 clean install)
# "./build -r" will download everything needed to build gcc
# "./build -c" will clean the working dictionary
# "./build -u" will update the source for gcc and linux
# "./build" will build the gcc

CONFIGURATION="--disable-multilib"
target="aarch64-linux-gnu"
#target="x86_64-linux-gnu"
GCC="origin/linaro-local/snapshots/linaro-7.2-2017.08"
ARCH="arm64"
#ARCH="x86_64"
install="$PWD/$target"
binutils="binutils-2.29"
gmp="gmp-6.1.2"
mpfr="mpfr-3.1.5"
mpc="mpc-1.0.3"
isl="isl-0.18"
cloog="cloog-0.18.4"
glibc="glibc-2.26"
tmpfs="yes" # set this to an no if your machin does not have much ram
job="-j$(cat /proc/cpuinfo | grep -c processor)"
PATH=$install/bin:$PATH

if [[ "$@" == "-r" ]]; then
	sudo apt install libc6-dev:amd64 texinfo git flex gawk
	if [ ! -e $mpfr.tar.xz ] && [ ! -d $mpfr ]; then
		wget http://www.mpfr.org/mpfr-current/$mpfr.tar.xz &
		EX=1
	fi
	if [ ! -e $gmp.tar.xz ] && [ ! -d $gmp ]; then
		wget https://gmplib.org/download/gmp/$gmp.tar.xz &
		EX=1
	fi
	if [ ! -e $mpc.tar.gz ] && [ ! -d $mpc ]; then
		wget ftp://ftp.gnu.org/gnu/mpc/$mpc.tar.gz &
		EX=1
	fi
	if [ ! -e $cloog.tar.gz ] && [ ! -d $cloog ]; then
		wget http://www.bastoul.net/cloog/pages/download/$cloog.tar.gz &
		EX=1
	fi
	if [ ! -e $isl.tar.xz ] && [ ! -d $isl ]; then
		wget http://isl.gforge.inria.fr/$isl.tar.xz &
		EX=1
	fi
	if [ ! -e $binutils.tar.gz ] && [ ! -d $binutils ]; then
		wget http://ftp.gnu.org/gnu/binutils/$binutils.tar.gz &
		EX=1
	fi
	if [ ! -e $glibc.tar.xz ] && [ ! -d $glibc ]; then
		wget http://ftp.gnu.org/gnu/glibc/$glibc.tar.xz &
		EX=1
	fi
	if [ ! -e gcc ]; then
		git clone https://git.linaro.org/toolchain/gcc.git &
	fi
	if [ ! -e linux ]; then
		git clone https://github.com/torvalds/linux.git &
	fi
	for job in `jobs -p` 
	do
		wait $job 
	done
	if [ "$EX" == "1" ]; then
		for f in *.tar*; do tar xfk $f; done
		rm *.tar*
	fi
	echo "done downloading"
fi
if [[ "$@" == "-c" ]]; then
	rm -rf build-glibc/*
	rm -rf build-gcc/*
	rm -rf build-binutils/*
	rm $target.*
	rm -rf $target
	echo "done cleaning up"
fi
if [[ "$@" == "-u" ]] || [[ "$@" == "-r" ]]; then
	cd gcc
		git remote update
		git checkout $GCC
		git merge origin/$GCC
	cd ..
	cd linux
		git remote update
		git merge origin/master
	cd ..
	echo "done updating"
fi

if [[ "$@" != "" ]]; then
	exit 0
fi

mkdir -p build-glibc
mkdir -p build-gcc
mkdir -p build-binutils

if [ "$tmpfs" == "yes" ]; then
	sudo mount -t tmpfs -o rw none build-glibc
	sudo mount -t tmpfs -o rw none build-gcc
	sudo mount -t tmpfs -o rw none build-binutils
fi

cd gcc
	ln -s -f ../$mpfr mpfr
	ln -s -f ../$gmp gmp
	ln -s -f ../$mpc mpc
	ln -s -f ../$isl isl
	ln -s -f ../$cloog cloog
cd ..

echo "stage: 1"
cd build-binutils
	../$binutils/configure $CONFIGURATION --target=$target --prefix=$install
	make $job || exit 1
	make install $job || exit 1
cd ..

echo "stage: 2"
cd linux
	make ARCH=$ARCH INSTALL_HDR_PATH=$install/$target headers_install $job || exit 1
cd ..

echo "stage: 3"
cd build-gcc
	../gcc/configure $CONFIGURATION --enable-languages=c --target=$target --prefix=$install
	make all-gcc $job || exit 1
	make install-gcc $job || exit 1
	if [ "$ARCH" == "x86_64" ]; then
		make all-target-libgcc $job || exit 1
		make install-target-libgcc $job || exit 1
	fi
cd ..

echo "stage: 4"
cd build-glibc
	../$glibc/configure --prefix=$install/$target --build=$MACHTYPE --host=$target --target=$target --with-headers=$install/$target/include $CONFIGURATION libc_cv_forced_unwind=yes
	make install-bootstrap-headers=yes install-headers $job || exit 1
	make csu/subdir_lib $job || exit 1
	install csu/crt1.o csu/crti.o csu/crtn.o $install/$target/lib
	$target-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o $install/$target/lib/libc.so
	touch $install/$target/include/gnu/stubs.h
	if [ "$ARCH" == "x86_64" ]; then
		make $job || exit 1
		make install $job || exit 1
	fi
cd ..

if [ "$ARCH" != "x86_64" ]; then
	echo "stage: 4.1"
	cd build-gcc
		make all-target-libgcc $job || exit 1
		make install-target-libgcc $job || exit 1
	cd ..

	echo "stage: 4.2"
	cd build-glibc
		make $job || exit 1
		make install $job || exit 1
	cd ..
fi

echo "stage: 5"
cd build-gcc
	make all $job || exit 1
	make install $job || exit 1
cd ..

echo "stage: done"
if [ "$tmpfs" == "yes" ]; then
	sudo umount build-glibc
	sudo umount build-gcc
	sudo umount build-binutils
fi

tar -cvf $target.tar $target
gzip -9 $target.tar

